const S3FS = require("@hasnat/s3fs");
const flatted = require("flatted");
const _ = require("lodash");
const path = require("path")

const endpoint = process.env["AWS_ENDPOINT"] ? `http://${process.env["AWS_ENDPOINT"]}` : null;
const payloadBucketPhysicalName = process.env.KLOTHO_S3_PREFIX + "{{.PayloadsBucketName}}";
const targetRegion = process.env["AWS_TARGET_REGION"];

const { userFS, runtimeFS } = getS3FileSystemAbstraction();

//TODO: Implement Delete
exports.fs = {
    writeFile: s3_writeFile,
    readFile: s3_readFile,
    readdir: s3_readdir,
    access: s3_exists,
};
exports.fs.promises = exports.fs;

function getS3FileSystemAbstraction() {
    let s3Func = (bucketName) =>
        new S3FS(`${bucketName}`, {
            apiVersion: "2006-03-01",
            region: targetRegion,
            s3ForcePathStyle: true,
            endpoint: endpoint,
        });

    let runtimeFS = s3Func(payloadBucketPhysicalName);
    let userFS = s3Func(`${payloadBucketPhysicalName}/files`);
    return { runtimeFS, userFS: userFS };
}

async function getCallParameters(paramKey, dispatcherMode) {
    let isEmitter = dispatcherMode === "emitter" ? true : false;
    try {
        let parameters = await runtimeFS.readFile(paramKey);
        parameters = flatted.parse((parameters.Body) || "");

        if (isEmitter && Array.isArray(parameters)) {
            // Emitters only have 1 parameter - the runtime saves an array, so we
            // normalize the parameter
            parameters = _.get(parameters, "[0]");
            if (Array.isArray(parameters)) {
                let paramPairs = _.toPairs(parameters);
                paramPairs = paramPairs.map((x) => {
                    if (_.get(x, "[1].type") == "Buffer") {
                        return [x[0], Buffer.from(_.get(x, "[1].data"))];
                    } else {
                        return x;
                    }
                });

                parameters = _.fromPairs(paramPairs);
            }
        }

        return parameters || {};
    } catch (e) {
        console.error(e);
        return;
    }
}
exports.getCallParameters = getCallParameters;

async function saveParametersToS3(paramsS3Key, params) {
    try {
        await runtimeFS.writeFile(paramsS3Key, flatted.stringify(params));
    } catch (e) {
        console.error(e);
        return;
    }
}
exports.saveParametersToS3 = saveParametersToS3;

async function s3_writeFile(...args) {
    try {
        let indexOfFlag = _.findIndex(args, (x) => _.get(x, "flag"));
        let getUrl = false;
        if (indexOfFlag >= 0) {
            getUrl = _.get(args[indexOfFlag], "flag").indexOf("w+") >= 0;
            _.pullAt(args, indexOfFlag);
        }

        if (getUrl) {
            await userFS.writeFile(args[0], args[1], {
                ACL: "public-read",
            });
            let pathToUse = args[0];
            pathToUse[0] == "." ? (pathToUse = pathToUse.substring(1)) : "";
            return getUrlFromFilename(pathToUse);
        }
        await userFS.writeFile(...args);
        return;
    } catch (err) {
        console.error(err);
        return;
    }
}

async function s3_readFile(...args) {
    let result = await userFS.readFile(...args);
    if (result.ContentEncoding) {
        return result.Body.toString(result.ContentEncoding);
    } else {
        return result.Body;
    }
}

async function s3_readdir(path) {
    try {
        return await userFS.readdir(path);
    } catch (e) {
        console.error(`s3fs couldn't readdir ${path}`);
        console.error(e);
        return;
    }
}

async function s3_exists(fpath) {
    if (await userFS.exists(fpath)) {
        return;
    } else {
        throw new Error(`${fpath} does not exist in ${path.join(userFS.bucket, userFS.path)}`);
    }
}

function getUrlFromFilename(fileName) {
    if (endpoint?.indexOf("localstack") >= 0) {
        return `${endpoint.replace("localstack", "localhost")}/${payloadBucketPhysicalName}/files${fileName}`;
    } else {
        return `https://${payloadBucketPhysicalName}.s3.amazonaws.com/files${fileName}`;
    }
}
